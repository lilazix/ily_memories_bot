#!/usr/bin/env python3
# coding: utf-8

"""
Love Memories Bot ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è

–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
- –í—Å—Ç–∞–≤—å —Ç–æ–∫–µ–Ω –≤ API_TOKEN.
- pip install aiogram==3.12 apscheduler
- python love_memories_bot.py
- –î–æ–±–∞–≤—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏ –Ω–∞–ø–∏—à–∏ /start –≤ –≥—Ä—É–ø–ø–µ.
"""

import asyncio
import json
import os
import random
from datetime import datetime, date
from typing import Dict, Any

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# ====== –ù–ê–°–¢–†–û–ô–ö–ò ======
API_TOKEN = "7557684954:AAH7SrZmP5pzn6DsF2VvENtSrlpLboAAgBs"  # <- –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–æ–∫–µ–Ω
DATA_FILE = "data.json"
DAILY_SEND_HOUR = 9  # —á–∞—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (0-23)

# ====== –î–ï–§–û–õ–¢–ù–´–ï –î–ê–ù–ù–´–ï ======
DEFAULTS = {
    "start_date": "2020-09-21",
    "meeting_date": "2025-12-18",
    "group_id": None,
    "places": [],
    "photos": [],  # list of {"file_id":..., "caption":..., "date": "..."}
    "wishes": [],
}

# ====== –ü–ï–†–°–ò–°–¢–ï–ù–¶–ò–Ø ======
def load_data() -> Dict[str, Any]:
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception as e:
            print("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è data.json:", e)
    # –∫–æ–ø–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–∞–≤–∏—Ç—å DEFAULTS –Ω–∞–ø—Ä—è–º—É—é
    return dict(DEFAULTS)

def save_data(d: Dict[str, Any]):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(d, f, ensure_ascii=False, indent=2)

data = load_data()

# –ø–æ–ø—ã—Ç–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—ã
try:
    START_DATE = datetime.fromisoformat(data.get("start_date", DEFAULTS["start_date"])).date()
except Exception:
    START_DATE = datetime.fromisoformat(DEFAULTS["start_date"]).date()
try:
    MEETING_DATE = datetime.fromisoformat(data.get("meeting_date", DEFAULTS["meeting_date"])).date()
except Exception:
    MEETING_DATE = datetime.fromisoformat(DEFAULTS["meeting_date"]).date()

# ====== –ë–û–¢ –ò –î–∏—Å–ø–µ—Ç—á–µ—Ä ======
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# ====== –í–†–ï–ú–ï–ù–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï (–æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞) ======
# pending_actions[chat_id] = {"action": "await_add_place" / "await_del_photo" / ...}
pending_actions: Dict[int, Dict[str, Any]] = {}

# ====== –ö–õ–ê–í–ò–ê–¢–£–†–ê ======
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìç –î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ"), KeyboardButton(text="üóÇ –°–ø–∏—Å–æ–∫ –º–µ—Å—Ç")],
        [KeyboardButton(text="üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –º–µ—Å—Ç–æ"), KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –º–µ—Å—Ç–æ")],
        [KeyboardButton(text="üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"), KeyboardButton(text="üñº –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è")],
        [KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ"), KeyboardButton(text="üìù –≠–∫—Å–ø–æ—Ä—Ç –∞—Ä—Ö–∏–≤–∞")],
        [KeyboardButton(text="üåü –î–æ–±–∞–≤–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ"), KeyboardButton(text="üìú –°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π")],
        [KeyboardButton(text="üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ"), KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ")],
        [KeyboardButton(text="üï∞ –õ–µ–Ω—Ç–∞"), KeyboardButton(text="üéÅ –°—é—Ä–ø—Ä–∏–∑")],
        [KeyboardButton(text="üíñ –ò–Ω—Ñ–æ")]
    ],
    resize_keyboard=True
)

# ====== –•–≠–õ–ü–ï–†–´ ======
def days_together() -> int:
    return (date.today() - START_DATE).days

def days_until_meeting() -> int:
    return (MEETING_DATE - date.today()).days

def format_places() -> str:
    places = data.get("places", [])
    if not places:
        return "üìç –°–ø–∏—Å–æ–∫ –º–µ—Å—Ç –ø—É—Å—Ç üïä"
    return "üìç –°–ø–∏—Å–æ–∫ –º–µ—Å—Ç:\n" + "\n".join(f"{i+1}. {p}" for i, p in enumerate(places))

def format_wishes() -> str:
    wishes = data.get("wishes", [])
    if not wishes:
        return "üåü –°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π –ø—É—Å—Ç ‚ú®"
    return "üåü –°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π:\n" + "\n".join(f"{i+1}. {w}" for i, w in enumerate(wishes))

def format_photos_list() -> str:
    photos = data.get("photos", [])
    if not photos:
        return "üì∑ –§–æ—Ç–æ-–≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç üïä"
    return "üì∑ –§–æ—Ç–æ-–≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n" + "\n".join(f"{i+1}. {p.get('caption','–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏')} ({p.get('date')})" for i, p in enumerate(photos))

# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö /start ======
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    chat_id = message.chat.id
    # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º group_id —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ
    data["group_id"] = chat_id
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç (–¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è)
    data["start_date"] = START_DATE.isoformat()
    data["meeting_date"] = MEETING_DATE.isoformat()
    save_data(data)
    await message.answer("üíå Love Memories Bot –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –Ø –≥–æ—Ç–æ–≤ —Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ä–æ–º–∞–Ω—Ç–∏—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.", reply_markup=main_kb)

# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö –§–û–¢–û (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –æ–±—â–µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ö—ç–Ω–¥–ª–µ—Ä–∞) ======
@dp.message(lambda m: m.photo is not None)
async def photo_catcher(message: types.Message):
    chat_id = message.chat.id
    # –µ—Å–ª–∏ –æ–∂–∏–¥–∞–ª–∏ —Ñ–æ—Ç–æ (—á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"), —Ç–æ —ç—Ç–æ –ø–∞
    pa = pending_actions.pop(chat_id, None)
    caption = message.caption or "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏"
    file_id = message.photo[-1].file_id
    record = {"file_id": file_id, "caption": caption, "date": date.today().isoformat()}
    data.setdefault("photos", []).append(record)
    save_data(data)
    # –æ—Ç–≤–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await message.answer("üì∑ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è!", reply_markup=main_kb)

# ====== –û–ë–©–ò–ô –¢–ï–ö–°–¢–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö ======
@dp.message()
async def text_handler(message: types.Message):
    chat_id = message.chat.id
    text = (message.text or "").strip()

    # –µ—Å–ª–∏ –µ—Å—Ç—å –æ–∂–∏–¥–∞—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚Äî –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ
    if chat_id in pending_actions:
        action = pending_actions.pop(chat_id)
        act = action.get("action")
        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞
        if act == "await_add_place":
            place = text
            data.setdefault("places", []).append(place)
            save_data(data)
            await message.answer(f"‚ú® –î–æ–±–∞–≤–ª–µ–Ω–æ –º–µ—Å—Ç–æ: {place}", reply_markup=main_kb)
            return
        # —É–¥–∞–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É
        if act == "await_del_place":
            try:
                idx = int(text) - 1
                if 0 <= idx < len(data.get("places", [])):
                    removed = data["places"].pop(idx)
                    save_data(data)
                    await message.answer(f"üóë –£–¥–∞–ª–µ–Ω–æ –º–µ—Å—Ç–æ: {removed}", reply_markup=main_kb)
                else:
                    await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –º–µ—Å—Ç–∞. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_kb)
            except Exception:
                await message.answer("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_kb)
            return
        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è
        if act == "await_add_wish":
            wish = text
            data.setdefault("wishes", []).append(wish)
            save_data(data)
            await message.answer(f"üåü –î–æ–±–∞–≤–ª–µ–Ω–æ –∂–µ–ª–∞–Ω–∏–µ: {wish}", reply_markup=main_kb)
            return
        # —É–¥–∞–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è
        if act == "await_del_wish":
            try:
                idx = int(text) - 1
                if 0 <= idx < len(data.get("wishes", [])):
                    removed = data["wishes"].pop(idx)
                    save_data(data)
                    await message.answer(f"üóë –£–¥–∞–ª–µ–Ω–æ –∂–µ–ª–∞–Ω–∏–µ: {removed}", reply_markup=main_kb)
                else:
                    await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_kb)
            except Exception:
                await message.answer("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_kb)
            return
        # —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ
        if act == "await_del_photo":
            try:
                idx = int(text) - 1
                if 0 <= idx < len(data.get("photos", [])):
                    removed = data["photos"].pop(idx)
                    save_data(data)
                    await message.answer(f"üóë –£–¥–∞–ª–µ–Ω–æ —Ñ–æ—Ç–æ: {removed.get('caption')}", reply_markup=main_kb)
                else:
                    await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–æ—Ç–æ. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_kb)
            except Exception:
                await message.answer("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_kb)
            return

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ / –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
    if text == "üìç –î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ":
        pending_actions[chat_id] = {"action": "await_add_place"}
        await message.answer("–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ö–∞—Ñ–µ –Ω–∞ –Ω–∞–±–µ—Ä–µ–∂–Ω–æ–π):", reply_markup=types.ReplyKeyboardRemove())
        return

    if text == "üóÇ –°–ø–∏—Å–æ–∫ –º–µ—Å—Ç":
        await message.answer(format_places(), reply_markup=main_kb)
        return

    if text == "üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –º–µ—Å—Ç–æ":
        if data.get("places"):
            await message.answer(f"üé≤ {random.choice(data['places'])}", reply_markup=main_kb)
        else:
            await message.answer("–°–ø–∏—Å–æ–∫ –º–µ—Å—Ç –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ –ø–µ—Ä–≤—ã–º.", reply_markup=main_kb)
        return

    if text == "üóë –£–¥–∞–ª–∏—Ç—å –º–µ—Å—Ç–æ":
        if not data.get("places"):
            await message.answer("–°–ø–∏—Å–æ–∫ –º–µ—Å—Ç –ø—É—Å—Ç üïä", reply_markup=main_kb)
        else:
            await message.answer(format_places() + "\n\n–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –º–µ—Å—Ç–∞, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å:", reply_markup=types.ReplyKeyboardRemove())
            pending_actions[chat_id] = {"action": "await_del_place"}
        return

    if text == "üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ":
        pending_actions[chat_id] = {"action": "await_add_photo"}
        await message.answer("–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ (–∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ) –∏ –ø–æ–¥–ø–∏—Å—å ‚Äî —è —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ.", reply_markup=types.ReplyKeyboardRemove())
        return

    if text == "üñº –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è":
        photos = data.get("photos", [])
        if not photos:
            await message.answer("–í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å —Ñ–æ—Ç–æ –ø–æ–∫–∞ –Ω–µ—Ç üïä", reply_markup=main_kb)
        else:
            # –æ—Ç–ø—Ä–∞–≤–∏–º —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∏ –∏ —Ñ–æ—Ç–æ
            for p in photos:
                try:
                    await message.answer_photo(p["file_id"], caption=p.get("caption", "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏"))
                except Exception:
                    await message.answer(f"–§–æ—Ç–æ: {p.get('caption','–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏')}")
            await message.answer("–í–æ—Ç –≤—Å–µ –≤–∞—à–∏ —Ñ–æ—Ç–æ-–≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è.", reply_markup=main_kb)
        return

    if text == "üóë –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ":
        if not data.get("photos"):
            await message.answer("–§–æ—Ç–æ-–≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=main_kb)
        else:
            await message.answer(format_photos_list() + "\n\n–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å:", reply_markup=types.ReplyKeyboardRemove())
            pending_actions[chat_id] = {"action": "await_del_photo"}
        return

    if text == "üìù –≠–∫—Å–ø–æ—Ä—Ç –∞—Ä—Ö–∏–≤–∞":
        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∞—Ä—Ö–∏–≤–∞
        parts = []
        parts.append("--- Love Memories Archive ---")
        parts.append(f"Start date: {data.get('start_date', START_DATE.isoformat())}")
        parts.append(f"Meeting date: {data.get('meeting_date', MEETING_DATE.isoformat())}")
        parts.append("")
        parts.append(format_places())
        parts.append("")
        parts.append(format_wishes())
        parts.append("")
        parts.append(format_photos_list())
        txt = "\n\n".join(parts)
        fname = f"love_archive_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        with open(fname, "w", encoding="utf-8") as f:
            f.write(txt)
        try:
            await message.answer_document(types.InputFile(fname))
        except Exception as e:
            await message.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—Ä—Ö–∏–≤–∞: " + str(e))
        finally:
            try:
                os.remove(fname)
            except Exception:
                pass
        return

    if text == "üåü –î–æ–±–∞–≤–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ":
        pending_actions[chat_id] = {"action": "await_add_wish"}
        await message.answer("–ù–∞–ø–∏—à–∏ –∂–µ–ª–∞–Ω–∏–µ (–∫–æ—Ä–æ—Ç–∫–æ):", reply_markup=types.ReplyKeyboardRemove())
        return

    if text == "üìú –°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π":
        await message.answer(format_wishes(), reply_markup=main_kb)
        return

    if text == "üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ":
        if data.get("wishes"):
            await message.answer(f"üé≤ {random.choice(data['wishes'])}", reply_markup=main_kb)
        else:
            await message.answer("–°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π –ø—É—Å—Ç ‚ú®", reply_markup=main_kb)
        return

    if text == "üóë –£–¥–∞–ª–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ":
        if not data.get("wishes"):
            await message.answer("–°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π –ø—É—Å—Ç ‚ú®", reply_markup=main_kb)
        else:
            await message.answer(format_wishes() + "\n\n–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –∂–µ–ª–∞–Ω–∏—è, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å:", reply_markup=types.ReplyKeyboardRemove())
            pending_actions[chat_id] = {"action": "await_del_wish"}
        return

    if text == "üï∞ –õ–µ–Ω—Ç–∞":
        choices = []
        if data.get("places"):
            choices.append(("place", random.choice(data["places"])))
        if data.get("photos"):
            choices.append(("photo", random.choice(data["photos"])))
        if data.get("wishes"):
            choices.append(("wish", random.choice(data["wishes"])))
        if not choices:
            await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ª–µ–Ω—Ç—ã üïä", reply_markup=main_kb)
        else:
            typ, val = random.choice(choices)
            if typ == "place":
                await message.answer(f"üï∞ –í—Å–ø–æ–º–∏–Ω–∞–µ–º –º–µ—Å—Ç–æ: {val}", reply_markup=main_kb)
            elif typ == "photo":
                try:
                    await message.answer_photo(val["file_id"], caption=f"üï∞ –í—Å–ø–æ–º–∏–Ω–∞–µ–º: {val.get('caption','–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏')}", reply_markup=main_kb)
                except Exception:
                    await message.answer(f"üï∞ –í—Å–ø–æ–º–∏–Ω–∞–µ–º: {val.get('caption','–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏')}", reply_markup=main_kb)
            else:
                await message.answer(f"üï∞ –í—Å–ø–æ–º–∏–Ω–∞–µ–º –∂–µ–ª–∞–Ω–∏–µ: {val}", reply_markup=main_kb)
        return

    if text == "üéÅ –°—é—Ä–ø—Ä–∏–∑":
        surprises = [
            "–ù–∞–ø–∏—à–∏ –µ–π 3 –ø—Ä–∏—á–∏–Ω—ã, –ø–æ—á–µ–º—É –æ–Ω–∞ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è üí¨",
            "–û—Ç–ø—Ä–∞–≤—å –µ–π –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–æ–º üéô",
            "–ó–∞–ø–ª–∞–Ω–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫—É—é –ø—Ä–æ–≥—É–ª–∫—É ‚Äî 30 –º–∏–Ω—É—Ç –≤–º–µ—Å—Ç–µ üåá",
            "–°–¥–µ–ª–∞–π –µ–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å ‚Äî –ø—É—Å—Ç—å –Ω–∞—á–Ω—ë—Ç—Å—è –¥–µ–Ω—å —Å —É–ª—ã–±–∫–∏ üòä",
            "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –æ–±–∞ —Å—á–∞—Å—Ç–ª–∏–≤—ã üì∏"
        ]
        await message.answer(random.choice(surprises), reply_markup=main_kb)
        return

    if text == "üíñ –ò–Ω—Ñ–æ":
        together = days_together()
        until = days_until_meeting()
        info_text = (
            f"üíû –í—ã –≤–º–µ—Å—Ç–µ —É–∂–µ {together} –¥–Ω–µ–π!\n"
            f"‚è≥ –î–æ –≤—Å—Ç—Ä–µ—á–∏ –æ—Å—Ç–∞–ª–æ—Å—å {until} –¥–Ω–µ–π.\n\n"
            "‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:\n"
            "üìç –î–æ–±–∞–≤–ª—è—Ç—å/—É–¥–∞–ª—è—Ç—å/–ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –º–µ—Å—Ç–∞\n"
            "üì∑ –î–æ–±–∞–≤–ª—è—Ç—å/—É–¥–∞–ª—è—Ç—å/–ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ñ–æ—Ç–æ-–≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
            "üåü –î–æ–±–∞–≤–ª—è—Ç—å/—É–¥–∞–ª—è—Ç—å/–ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∂–µ–ª–∞–Ω–∏—è\n"
            "üï∞ –õ–µ–Ω—Ç–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
            "üéÅ –°—é—Ä–ø—Ä–∏–∑ (—Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è)\n"
            "üìù –≠–∫—Å–ø–æ—Ä—Ç –∞—Ä—Ö–∏–≤–∞ (.txt)\n"
            "üíñ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∏ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
        )
        await message.answer(info_text, reply_markup=main_kb)
        return

    # –µ—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer("–ù–µ –ø–æ–Ω—è–ª. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.", reply_markup=main_kb)


# ====== –ï–ñ–ï–î–ù–ï–í–ù–´–ï –ò –û–°–û–ë–´–ï –°–û–û–ë–©–ï–ù–ò–Ø ======
async def send_daily_and_special():
    group_id = data.get("group_id")
    if not group_id:
        return
    together = days_together()
    until = days_until_meeting()
    quotes = [
        "–Ø —Å–∫—É—á–∞—é –ø–æ —Ç–µ–±–µ üíï",
        "–¢—ã –º–æ—ë —Å—á–∞—Å—Ç—å–µ üå∏",
        "–õ—é–±–ª—é —Ç–µ–±—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ ü§ç",
        "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —Å —Ç–æ–±–æ–π ‚Äî –ø–æ–¥–∞—Ä–æ–∫ üéÅ",
        "–¢—ã –º–æ–π —Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ üí´"
    ]
    today = date.today()
    special = None
    # –≥–æ–¥–æ–≤—â–∏–Ω–∞ (–ø–æ –¥–Ω—é –∏ –º–µ—Å—è—Ü—É)
    if today.month == START_DATE.month and today.day == START_DATE.day:
        years = today.year - START_DATE.year
        special = f"üéâ –°–µ–≥–æ–¥–Ω—è –≤–∞—à–∞ –≥–æ–¥–æ–≤—â–∏–Ω–∞ ‚Äî {years} {'–≥–æ–¥' if years==1 else '–ª–µ—Ç'} –≤–º–µ—Å—Ç–µ!"
    # –≤—Å—Ç—Ä–µ—á–∞
    if today == MEETING_DATE:
        special = "üí´ –°–µ–≥–æ–¥–Ω—è –≤–∞—à–∞ –≤—Å—Ç—Ä–µ—á–∞! –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –º–æ–º–µ–Ω—Ç–æ–º üíñ"

    base = f"üíñ –°–µ–≥–æ–¥–Ω—è –≤—ã –≤–º–µ—Å—Ç–µ —É–∂–µ {together} –¥–Ω–µ–π!\n‚è≥ –î–æ –≤—Å—Ç—Ä–µ—á–∏ –æ—Å—Ç–∞–ª–æ—Å—å {until} –¥–Ω–µ–π.\n"
    if special:
        base += f"\n{special}\n"
    base += f"\n{random.choice(quotes)}"
    try:
        await bot.send_message(group_id, base)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", e)

def schedule_daily():
    # —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ cron-–∑–∞–¥–∞–Ω–∏–µ
    try:
        scheduler.remove_all_jobs()
    except Exception:
        pass
    # –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ hour:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    scheduler.add_job(lambda: asyncio.create_task(send_daily_and_special()), 'cron', hour=DAILY_SEND_HOUR, minute=0)
    scheduler.start()

# ====== –ó–ê–ü–£–°–ö ======
async def main():
    print("Love Memories Bot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    data.setdefault("start_date", START_DATE.isoformat())
    data.setdefault("meeting_date", MEETING_DATE.isoformat())
    save_data(data)
    schedule_daily()

    if os.getenv("PORT"):  # Railway –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        from aiohttp import web

        async def handle(request):
            update = await request.json()
            await dp.feed_webhook_update(bot, update)
            return web.Response()

        app = web.Application()
        app.router.add_post(f"/{API_TOKEN}", handle)

        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
        public_url = os.getenv("RAILWAY_STATIC_URL")
        webhook_url = f"{public_url}/{API_TOKEN}"

        await bot.delete_webhook(drop_pending_updates=True)
        await bot.set_webhook(webhook_url)
        
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, "0.0.0.0", int(os.getenv("PORT", 8080)))
        await site.start()

        print(f"Webhook –∑–∞–ø—É—â–µ–Ω –Ω–∞ {webhook_url}")
        while True:  # –¥–µ—Ä–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∂–∏–≤—ã–º
            await asyncio.sleep(3600)
    else:
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")



